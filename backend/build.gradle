buildscript {
	ext {
		kotlinVersion = '1.3.72'
		springBootVersion = '2.3.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin-jpa'
apply plugin: 'war'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
    }
}

def getInternalVersion() {
    println "Getting version..."
    def output = new ByteArrayOutputStream()
    project.exec {
        commandLine = ['node', './get-version.js']
        standardOutput = output
    }
    println "Found version ${output.toString()}"
    return output.toString()
}

processResources {
    def props = ["internalVersion":getInternalVersion()]
    println("Processing resources...")
    println(props)
    filesMatching('**/application.properties') {
        expand(props)
    }
}

repositories {
	mavenCentral()
}

test {
	useJUnitPlatform()
}

//bootWar { mustRunAfter(processResources) }

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-mustache')
	compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')
    compile("org.springframework.boot:spring-boot-starter-security")
    compile('org.springframework.boot:spring-boot-starter-tomcat')
    compile('org.springframework.boot:spring-boot-starter-validation')
	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
    compile 'javax.xml.bind:jaxb-api:2.3.0'
	compile('mysql:mysql-connector-java')
	compile("org.flywaydb:flyway-core:6.5.2")
	compile("net.bramp.ffmpeg:ffmpeg:0.6.2")
    compile("org:jaudiotagger:2.0.3")
    compile 'com.amazonaws:aws-java-sdk-s3'
    compile 'org.sejda.imageio:webp-imageio:0.1.6' // adds webp support to ImageIO.read()

    // Fixes problem of "Could not get constructor for org.hibernate.persister.entity.JoinedSubclassEntityPersister on Java 11
    compile 'org.javassist:javassist:3.23.1-GA'

//    testCompile(group: 'junit', name: 'junit', version: '4.11')
	runtime('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-test') {
		exclude module: 'junit'
        exclude module: 'junit-vintage-engine'
	}
	testImplementation('org.junit.jupiter:junit-jupiter-api')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
}
